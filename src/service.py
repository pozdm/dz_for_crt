import requests
from pydantic import ValidationError

from models import UserCreate, UserLogin, TaskCreate, TaskUpdate, UserResponse, Task
from src.models import Token

API_BASE_URL = "http://212.57.118.30:8000/"
API_USER_URL = f"{API_BASE_URL}/api/v1/user/"
API_TASKS_URL = f"{API_BASE_URL}/api/v1/tasks/"


def validate_response(data: str, model):
    try:
        model(**data)
    except ValidationError:
        raise ValueError("‚ùå –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")


def register_user(user: UserCreate):
    url = f"{API_USER_URL}register/"
    response = requests.post(url, json=user.model_dump())

    if response.status_code == 200:
        validate_response(response.json(), UserResponse)
        user_data = UserResponse(**response.json())
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_data.username}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    elif response.status_code == 409:
        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    else:
        raise (f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code} ‚Äî {response.text}")


def login_user(credentials: UserLogin) -> Token:
    url = f"{API_USER_URL}login/"
    response = requests.post(url, json=credentials.model_dump())

    if response.status_code == 200:
        validate_response(response.json(), Token)
        print("üîê –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return response.json()["token"]

    else:
        raise (f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code} ‚Äî {response.text}")


def get_user(token: str):
    url = f"{API_USER_URL}profile/"
    headers = {"Authorization": f"{token}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        validate_response(response.json(), UserResponse)
        print(f"üîé –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {response.json()['username']}\n")

    else:
        raise (f"‚ùå –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")


def create_task(token: str, task: TaskCreate) -> int:
    url = f"{API_TASKS_URL}"
    headers = {"Authorization": f"{token}"}
    response = requests.post(url, headers=headers, json=task.model_dump())

    if response.status_code == 200:
        validate_response(response.json(), Task)
        task_data = response.json()
        print(f"üìù –ó–∞–¥–∞—á–∞ ‚Ññ'{task_data['id']}' —Å–æ–∑–¥–∞–Ω–∞")
        return task_data["id"]

    else:
        raise (f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code} ‚Äî {response.text}")


def get_tasks(token: str):
    url = f"{API_TASKS_URL}"
    headers = {"Authorization": f"{token}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        print(f"üìã –í—Å–µ –∑–∞–¥–∞—á–∏: {response.json()}")

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {response.status_code} ‚Äî {response.text}")


def get_task_by_id(token: str, task_id: int):
    url = f"{API_TASKS_URL}{task_id}"
    headers = {"Authorization": f"{token}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        validate_response(response.json(), Task)
        print(f"üîé –ó–∞–¥–∞—á–∞ –ø–æ ID {task_id} –Ω–∞–π–¥–µ–Ω–∞")

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID {task_id}")


def update_task(token: str, task_id: int, task_update: TaskUpdate):
    url = f"{API_TASKS_URL}{task_id}"
    headers = {"Authorization": f"{token}"}
    response = requests.patch(url, headers=headers, json=task_update.model_dump())

    if response.status_code == 200:
        validate_response(response.json(), Task)
        print(f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")


def delete_task(token: str, task_id: int):
    url = f"{API_TASKS_URL}{task_id}"
    headers = {"Authorization": f"{token}"}
    response = requests.delete(url, headers=headers)

    if response.status_code == 200:
        if isinstance(response.json(), str):
            raise ("‚ùå –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")

        print(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞")

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code} ‚Äî {response.text}")
